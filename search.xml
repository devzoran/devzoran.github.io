<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ET-热重载</title>
      <link href="/ET-%E7%83%AD%E9%87%8D%E8%BD%BD/"/>
      <url>/ET-%E7%83%AD%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>CodeLoader.Start()依赖Init.cs中的Start生命周期触发。<br>无论是否启用热重载流程，必不可少的是需要触发游戏Entry流程，CodeLoader.cs中触发代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IStaticMethod start = <span class="keyword">new</span> StaticMethod(<span class="keyword">this</span>.model, <span class="string">&quot;ET.Entry&quot;</span>, <span class="string">&quot;Start&quot;</span>);</span><br><span class="line">start.Run();</span><br></pre></td></tr></table></figure><p>而在CodeLoader.StartAsync()代码中，又对游戏一些必要模块进行了初始化，同时触发相关事件进行Publish：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> ETTask <span class="title">StartAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    WinPeriod.Init();</span><br><span class="line">    </span><br><span class="line">    MongoHelper.Init();</span><br><span class="line">    ProtobufHelper.Init();</span><br><span class="line">    </span><br><span class="line">    Game.AddSingleton&lt;NetServices&gt;();</span><br><span class="line">    Game.AddSingleton&lt;Root&gt;();</span><br><span class="line">    Game.AddSingleton&lt;CDSystem&gt;();</span><br><span class="line">    <span class="keyword">await</span> Game.AddSingleton&lt;ConfigComponent&gt;().LoadAsync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> EventSystem.Instance.PublishAsync(Root.Instance.Scene, <span class="keyword">new</span> EventType.EntryEvent1());</span><br><span class="line">    <span class="keyword">await</span> EventSystem.Instance.PublishAsync(Root.Instance.Scene, <span class="keyword">new</span> EventType.EntryEvent2());</span><br><span class="line">    <span class="keyword">await</span> EventSystem.Instance.PublishAsync(Root.Instance.Scene, <span class="keyword">new</span> EventType.EntryEvent3());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ET-资源系统</title>
      <link href="/ET-%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/ET-%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ET-启动流程</title>
      <link href="/ET-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/ET-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Init.cs</p><ul><li>Start生命周期<blockquote><p>Game部分单例对象的初始化</p></blockquote><ul><li>新增了YooAsset的资源系统初始化流程，代码如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Game.AddSingleton&lt;MonoResComponent&gt;().InitAsync(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Game.AddSingleton&lt;CodeLoader&gt;().Start();</span><br><span class="line">&#125;).Coroutine();</span><br></pre></td></tr></table></figure>资源初始化结束后，再执行CodeLoader.cs中的AOT流程<ul><li><a href="../ET-%E8%B5%84%E6%BA%90%E7%B3%BB%E7%BB%9F/">关于MonoResComponent</a></li><li><a href="../ET-%E7%83%AD%E9%87%8D%E8%BD%BD/">关于CodeLoader</a></li></ul></li></ul></li></ul><br><ul><li>Update生命周期<blockquote><p>Game中Update流程</p></blockquote><ul><li><a href>关于Game.Update()</a></li></ul></li></ul><br><ul><li>LateUpdate生命周期<blockquote><p>Game中的LateUpdate流程和FrameFinishUpdate流程</p></blockquote><ul><li><a href>关于Game.LateUpdate()</a></li><li><a href>关于Game.FrameFinishUpdate()</a></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ET TODO LIST</title>
      <link href="/ET-TODO-LIST/"/>
      <url>/ET-TODO-LIST/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h4 id="基于FGUI的UI管理器"><a href="#基于FGUI的UI管理器" class="headerlink" title="基于FGUI的UI管理器"></a>基于FGUI的UI管理器</h4><pre><code>- 登陆界面- 游戏主界面</code></pre><h4 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h4><h4 id="集成Spine动画"><a href="#集成Spine动画" class="headerlink" title="集成Spine动画"></a>集成Spine动画</h4><h4 id="回合制战斗框架"><a href="#回合制战斗框架" class="headerlink" title="回合制战斗框架"></a>回合制战斗框架</h4><h4 id="红点系统"><a href="#红点系统" class="headerlink" title="红点系统"></a>红点系统</h4><h4 id="UI动画系统"><a href="#UI动画系统" class="headerlink" title="UI动画系统"></a>UI动画系统</h4><h4 id="音频系统"><a href="#音频系统" class="headerlink" title="音频系统"></a>音频系统</h4><h4 id="AOT流程研究总结"><a href="#AOT流程研究总结" class="headerlink" title="AOT流程研究总结"></a>AOT流程研究总结</h4><h4 id="热更新流程"><a href="#热更新流程" class="headerlink" title="热更新流程"></a>热更新流程</h4><h4 id="YooAsset"><a href="#YooAsset" class="headerlink" title="YooAsset"></a>YooAsset</h4>]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity中的AOT和JIT</title>
      <link href="/Unity%E4%B8%AD%E7%9A%84AOT%E5%92%8CJIT/"/>
      <url>/Unity%E4%B8%AD%E7%9A%84AOT%E5%92%8CJIT/</url>
      
        <content type="html"><![CDATA[<h4 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h4><pre><code>JIT，即Just-in-time,动态(即时)编译，边运行边编译</code></pre><ul><li>JIT 的优点<ul><li>可以根据当前硬件情况实时编译生成最优机器指令（ps. AOT也可以做到，在用户使用时使用字节码根据机器情况再做一次编译）</li><li>可以根据当前程序的运行情况生成最优的机器指令序列</li><li>当程序需要支持动态链接时，只能使用JIT</li><li>可以根据进程中内存的实际情况调整代码，使内存能够更充分的利用</li></ul></li><li>JIT 的缺点<ul><li>编译需要占用运行时资源，会导致进程卡顿</li><li>由于编译时间需要占用运行时间，对于某些代码的编译优化不能完全支持，需要在程序流畅和编译时间之间做权衡</li><li>在编译准备和识别频繁使用的方法需要占用时间，使得初始编译不能达到最高性能</li></ul></li></ul><h4 id="AOT"><a href="#AOT" class="headerlink" title="AOT"></a>AOT</h4><pre><code>Ahead Of Time，指运行前编译，是两种程序的编译方式</code></pre><ul><li>AOT 的优点<ul><li>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</li><li>可以在程序运行初期就达到最高性能</li><li>可以显著的加快程序的启动</li></ul></li><li>AOT 的缺点<ul><li>在程序运行前编译会使程序安装的时间增加</li><li>牺牲语言的一致性</li><li>将提前编译的内容保存会占用更多的外存</li></ul></li></ul><h4 id="与Unity的关联"><a href="#与Unity的关联" class="headerlink" title="与Unity的关联"></a>与Unity的关联</h4><ul><li>JIT &amp; Mono 编译<br>Unity 的跨平台技术是通过一个 Mono 虚拟机实现的。而这个虚拟机更新太慢，不能很好地适应众多的平台。<br><img src="/Unity%E4%B8%AD%E7%9A%84AOT%E5%92%8CJIT/MONOVM.jpg?40" alt="mono vm"></li><li>AOT &amp; IL2CPP编译<br>unity 公司因为 Mono 的缺点自行研发了 IL2cpp，把本来应该在 mono 虚拟机上跑的中间代码转换成 cpp 代码，再利用 c++ 的跨平台特性(在各个平台上通过对各平台都有良好优化的 native c++ 编译器编译)，以获得更高的效率和更好的兼容性。<br><img src="/Unity%E4%B8%AD%E7%9A%84AOT%E5%92%8CJIT/IL2CPPVM.jpg?40" alt="il2cpp vm"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 Node.js</title>
      <link href="/Mac%E5%AE%89%E8%A3%85nodejs/"/>
      <url>/Mac%E5%AE%89%E8%A3%85nodejs/</url>
      
        <content type="html"><![CDATA[<h4 id="通过-nvm-安装指定版本的-node"><a href="#通过-nvm-安装指定版本的-node" class="headerlink" title="通过 nvm 安装指定版本的 node"></a>通过 nvm 安装指定版本的 node</h4><ul><li><p>安装 NVM（前提是你安装了homebrew）</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install nvm</span><br></pre></td></tr></table></figure></li><li><p>在 shell 中可以使用 nvm 命令，如果没有 .bash_profile 文件需要自行 touch .bash_profile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~ </span><br><span class="line">$ vim .bash_profile </span><br></pre></td></tr></table></figure></li><li><p>i 键进入编辑模式，在最后另起一行添加以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=~/.nvm</span><br><span class="line">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure></li><li><p>esc 退出编辑模式</p></li><li><p>:wq! 退出并保存修改</p></li><li><p>重新 source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source .bash_profile</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-nvm-安装-node"><a href="#使用-nvm-安装-node" class="headerlink" title="使用 nvm 安装 node"></a>使用 nvm 安装 node</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nvm ls-remote 联网查看 所有的node可用版本</span><br><span class="line"></span><br><span class="line">$ nvm install xxx 下载你想要的版本</span><br><span class="line"></span><br><span class="line">$ nvm use xxx 使用指定版本的node </span><br><span class="line"></span><br><span class="line">$ nvm alias default xxx 每次启动终端都使用该版本的node </span><br></pre></td></tr></table></figure><h4 id="检测是否安装完成"><a href="#检测是否安装完成" class="headerlink" title="检测是否安装完成"></a>检测是否安装完成</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><h4 id="zsh-command-not-found"><a href="#zsh-command-not-found" class="headerlink" title="zsh: command not found"></a>zsh: command not found</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 终端执行</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"># 最后一行添加命令</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"># 编辑退出后，控制台执行</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装Homebrew</title>
      <link href="/Mac%E5%AE%89%E8%A3%85Homebrew/"/>
      <url>/Mac%E5%AE%89%E8%A3%85Homebrew/</url>
      
        <content type="html"><![CDATA[<h4 id="brew-简介"><a href="#brew-简介" class="headerlink" title="brew 简介"></a>brew 简介</h4><p>  brew 又叫 <strong>Homebrew</strong>，是 Mac OSX 上的软件包管理工具，能在 Mac 中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。</p><h4 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h4><p>  brew 的官方网站： <a href="http://brew.sh/">http://brew.sh/</a>   在官方网站对brew的用法进行了详细的描述</p><h4 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h4><p>  在 Mac 中打开 Termal 并输入命令：<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)” </span><br></pre></td></tr></table></figure><br>  注：此链接可能会根据官网变动</p><h4 id="使用-brew-安装软件举例"><a href="#使用-brew-安装软件举例" class="headerlink" title="使用 brew 安装软件举例"></a>使用 brew 安装软件举例</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装 git</span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装 wget</span><br><span class="line">brew install wget</span><br></pre></td></tr></table></figure><h4 id="使用-brew-卸载软件"><a href="#使用-brew-卸载软件" class="headerlink" title="使用 brew 卸载软件"></a>使用 brew 卸载软件</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall wget</span><br></pre></td></tr></table></figure><h4 id="使用-brew-查询软件"><a href="#使用-brew-查询软件" class="headerlink" title="使用 brew 查询软件"></a>使用 brew 查询软件</h4>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search /wge*/</span><br></pre></td></tr></table></figure><p>  &#x2F;wge*&#x2F;是个正则表达式， 需要包含在&#x2F;中</p><h4 id="其他-brew-命令"><a href="#其他-brew-命令" class="headerlink" title="其他 brew 命令"></a>其他 brew 命令</h4><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td>brew list</td><td>列出已安装的软件</td></tr><tr><td>brew update</td><td>更新brew</td></tr><tr><td>brew home</td><td>用浏览器打开brew的官方网站</td></tr><tr><td>brew info</td><td>显示软件信息</td></tr><tr><td>brew deps</td><td>显示包依赖</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
